;; Analyzed by ClojureScript 0.0-3211
{:use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :excludes #{}, :name figwheel.client, :imports {}, :requires {guri goog.Uri, async cljs.core.async, goog.Uri goog.Uri, cljs.core.async cljs.core.async, socket figwheel.client.socket, figwheel.client.file-reloading figwheel.client.file-reloading, reloading figwheel.client.file-reloading, string clojure.string, figwheel.client.utils figwheel.client.utils, cljs.repl cljs.repl, utils figwheel.client.utils, figwheel.client.heads-up figwheel.client.heads-up, figwheel.client.socket figwheel.client.socket, heads-up figwheel.client.heads-up, clojure.string clojure.string}, :uses {timeout cljs.core.async, <! cljs.core.async, close! cljs.core.async, chan cljs.core.async, alts! cljs.core.async, map< cljs.core.async, put! cljs.core.async}, :defs {focus-msgs {:protocol-inline nil, :meta {:arglists (quote ([name-set msg-hist])), :end-column 17, :end-line 47, :column 7, :line 47, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/figwheel/client.cljs"}, :name figwheel.client/focus-msgs, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 17, :method-params ([name-set msg-hist]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 2, :fn-var true, :arglists (quote ([name-set msg-hist])), :test true}, handle-deprecated-jsload-callback {:protocol-inline nil, :meta {:arglists (quote ([config])), :end-column 40, :end-line 280, :column 7, :line 280, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/figwheel/client.cljs"}, :name figwheel.client/handle-deprecated-jsload-callback, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 40, :method-params ([config]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 280, :end-line 280, :max-fixed-arity 1, :fn-var true, :arglists (quote ([config])), :test true}, default-on-compile-fail {:protocol-inline nil, :meta {:arglists (quote ([{:keys [formatted-exception exception-data cause], :as ed}])), :end-column 30, :end-line 233, :column 7, :line 233, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/figwheel/client.cljs"}, :name figwheel.client/default-on-compile-fail, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 30, :method-params ([p__32068]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 233, :end-line 233, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [formatted-exception exception-data cause], :as ed}])), :test true}, reload-file?* {:protocol-inline nil, :meta {:arglists (quote ([msg-name opts])), :end-column 20, :end-line 50, :column 7, :line 50, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/figwheel/client.cljs"}, :name figwheel.client/reload-file?*, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 20, :method-params ([msg-name opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 2, :fn-var true, :arglists (quote ([msg-name opts])), :test true}, __figwheel-start-once__ {:meta {:end-column 40, :end-line 317, :column 17, :line 317, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/figwheel/client.cljs"}, :file "resources/public/js/compiled/out/figwheel/client.cljs", :line 317, :column 8, :end-line 317, :end-column 40, :test true, :name figwheel.client/__figwheel-start-once__}, error-msg-format {:protocol-inline nil, :meta {:arglists (quote ([{:keys [message class]}])), :end-column 23, :end-line 41, :column 7, :line 41, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/figwheel/client.cljs"}, :name figwheel.client/error-msg-format, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 23, :method-params ([p__31496]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [message class]}])), :test true}, compile-fail-warning-plugin {:protocol-inline nil, :meta {:arglists (quote ([{:keys [on-compile-warning on-compile-fail]}])), :end-column 34, :end-line 155, :column 7, :line 155, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/figwheel/client.cljs"}, :name figwheel.client/compile-fail-warning-plugin, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 34, :method-params ([p__31670]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 155, :end-line 155, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [on-compile-warning on-compile-fail]}])), :test true}, console-print {:protocol-inline nil, :meta {:arglists (quote ([args])), :end-column 20, :end-line 24, :column 7, :line 24, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/figwheel/client.cljs"}, :name figwheel.client/console-print, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 20, :method-params ([args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists (quote ([args])), :test true}, add-plugins {:protocol-inline nil, :meta {:arglists (quote ([plugins system-options])), :end-column 18, :end-line 307, :column 7, :line 307, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/figwheel/client.cljs"}, :name figwheel.client/add-plugins, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 18, :method-params ([plugins system-options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 307, :end-line 307, :max-fixed-arity 2, :fn-var true, :arglists (quote ([plugins system-options])), :test true}, figwheel-repl-print {:protocol-inline nil, :meta {:arglists (quote ([args])), :end-column 26, :end-line 18, :column 7, :line 18, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/figwheel/client.cljs"}, :name figwheel.client/figwheel-repl-print, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 26, :method-params ([args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists (quote ([args])), :test true}, file-reloader-plugin {:protocol-inline nil, :meta {:arglists (quote ([opts])), :end-column 27, :end-line 80, :column 7, :line 80, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/figwheel/client.cljs"}, :name figwheel.client/file-reloader-plugin, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 27, :method-params ([opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 1, :fn-var true, :arglists (quote ([opts])), :test true}, heads-up-plugin-msg-handler {:protocol-inline nil, :meta {:arglists (quote ([opts msg-hist'])), :end-column 34, :end-line 163, :column 7, :line 163, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/figwheel/client.cljs"}, :name figwheel.client/heads-up-plugin-msg-handler, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 34, :method-params ([opts msg-hist']), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 163, :end-line 163, :max-fixed-arity 2, :fn-var true, :arglists (quote ([opts msg-hist'])), :test true}, watch-and-reload-with-opts {:meta {:end-column 32, :end-line 335, :column 6, :line 335, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/figwheel/client.cljs"}, :file "resources/public/js/compiled/out/figwheel/client.cljs", :line 335, :column 1, :end-line 335, :end-column 32, :test true, :name figwheel.client/watch-and-reload-with-opts}, compile-fail-state? {:protocol-inline nil, :meta {:arglists (quote ([msg-names])), :end-column 26, :end-line 71, :column 7, :line 71, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/figwheel/client.cljs"}, :name figwheel.client/compile-fail-state?, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 26, :method-params ([msg-names]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 1, :fn-var true, :arglists (quote ([msg-names])), :test true}, format-messages {:meta {:end-column 21, :end-line 43, :column 6, :line 43, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/figwheel/client.cljs"}, :file "resources/public/js/compiled/out/figwheel/client.cljs", :line 43, :column 1, :end-line 43, :end-column 21, :test true, :name figwheel.client/format-messages}, css-reloader-plugin {:protocol-inline nil, :meta {:arglists (quote ([opts])), :end-column 26, :end-line 150, :column 7, :line 150, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/figwheel/client.cljs"}, :name figwheel.client/css-reloader-plugin, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 26, :method-params ([opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 150, :end-line 150, :max-fixed-arity 1, :fn-var true, :arglists (quote ([opts])), :test true}, ensure-cljs-user {:protocol-inline nil, :meta {:arglists (quote ([])), :doc "The REPL can disconnect and reconnect lets ensure cljs.user exists at least.", :end-column 23, :end-line 133, :column 7, :line 133, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/figwheel/client.cljs"}, :name figwheel.client/ensure-cljs-user, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 133, :end-line 133, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "The REPL can disconnect and reconnect lets ensure cljs.user exists at least.", :test true}, watch-and-reload {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [], :as opts})], :arglists [[& {:keys [], :as opts}]], :arglists-meta (nil)}, :arglists (quote ([& {:keys [], :as opts}])), :end-column 23, :end-line 336, :column 7, :line 336, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/figwheel/client.cljs"}, :name figwheel.client/watch-and-reload, :variadic true, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [], :as opts})], :arglists [[& {:keys [], :as opts}]], :arglists-meta (nil)}, :method-params [({:keys [], :as opts})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 336, :end-line 336, :max-fixed-arity 0, :fn-var true, :arglists [[& {:keys [], :as opts}]], :test true}, start {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 1, :method-params ([opts] []), :arglists ([opts] []), :arglists-meta (nil nil)}, :arglists (quote ([opts] [])), :end-column 12, :end-line 314, :column 7, :line 314, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/figwheel/client.cljs"}, :name figwheel.client/start, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([opts] []), :arglists ([opts] []), :arglists-meta (nil nil)}, :method-params ([opts] []), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 314, :end-line 314, :max-fixed-arity 1, :fn-var true, :arglists ([opts] []), :test true}, repl-plugin {:protocol-inline nil, :meta {:arglists (quote ([{:keys [build-id], :as opts}])), :end-column 18, :end-line 140, :column 7, :line 140, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/figwheel/client.cljs"}, :name figwheel.client/repl-plugin, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 18, :method-params ([p__31655]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 140, :end-line 140, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [build-id], :as opts}])), :test true}, eval-javascript** {:protocol-inline nil, :meta {:arglists (quote ([code result-handler])), :end-column 26, :end-line 111, :column 9, :line 111, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/figwheel/client.cljs"}, :name figwheel.client/eval-javascript**, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 26, :method-params ([code result-handler]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 111, :end-line 111, :max-fixed-arity 2, :fn-var true, :arglists (quote ([code result-handler])), :test true}, heads-up-plugin {:protocol-inline nil, :meta {:arglists (quote ([opts])), :end-column 22, :end-line 196, :column 7, :line 196, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/figwheel/client.cljs"}, :name figwheel.client/heads-up-plugin, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 22, :method-params ([opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 196, :end-line 196, :max-fixed-arity 1, :fn-var true, :arglists (quote ([opts])), :test true}, css-loaded-state? {:protocol-inline nil, :meta {:arglists (quote ([msg-names])), :end-column 24, :end-line 77, :column 7, :line 77, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/figwheel/client.cljs"}, :name figwheel.client/css-loaded-state?, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 24, :method-params ([msg-names]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 1, :fn-var true, :arglists (quote ([msg-names])), :test true}, heads-up-config-options** {:meta {:end-column 35, :end-line 198, :column 10, :line 198, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/figwheel/client.cljs"}, :file "resources/public/js/compiled/out/figwheel/client.cljs", :line 198, :column 5, :end-line 198, :end-column 35, :test true, :name figwheel.client/heads-up-config-options**}, block-reload-file-state? {:protocol-inline nil, :meta {:arglists (quote ([msg-names opts])), :end-column 31, :end-line 58, :column 7, :line 58, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/figwheel/client.cljs"}, :name figwheel.client/block-reload-file-state?, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 31, :method-params ([msg-names opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 2, :fn-var true, :arglists (quote ([msg-names opts])), :test true}, rewarning-state? {:protocol-inline nil, :meta {:arglists (quote ([msg-names])), :end-column 23, :end-line 68, :column 7, :line 68, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/figwheel/client.cljs"}, :name figwheel.client/rewarning-state?, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 23, :method-params ([msg-names]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 1, :fn-var true, :arglists (quote ([msg-names])), :test true}, get-essential-messages {:protocol-inline nil, :meta {:arglists (quote ([ed])), :end-column 29, :end-line 36, :column 7, :line 36, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/figwheel/client.cljs"}, :name figwheel.client/get-essential-messages, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 29, :method-params ([ed]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ed])), :test true}, default-on-jsload {:protocol-inline nil, :meta {:arglists (quote ([url])), :end-column 24, :end-line 227, :column 7, :line 227, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/figwheel/client.cljs"}, :name figwheel.client/default-on-jsload, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 24, :method-params ([url]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 227, :end-line 227, :max-fixed-arity 1, :fn-var true, :arglists (quote ([url])), :test true}, base-plugins {:protocol-inline nil, :meta {:arglists (quote ([system-options])), :end-column 19, :end-line 287, :column 7, :line 287, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/figwheel/client.cljs"}, :name figwheel.client/base-plugins, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 19, :method-params ([system-options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 287, :end-line 287, :max-fixed-arity 1, :fn-var true, :arglists (quote ([system-options])), :test true}, default-on-cssload {:protocol-inline nil, :meta {:arglists (quote ([files])), :end-column 25, :end-line 249, :column 7, :line 249, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/figwheel/client.cljs"}, :name figwheel.client/default-on-cssload, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 25, :method-params ([files]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 249, :end-line 249, :max-fixed-arity 1, :fn-var true, :arglists (quote ([files])), :test true}, enforce-project-plugin {:protocol-inline nil, :meta {:arglists (quote ([opts])), :end-column 29, :end-line 206, :column 7, :line 206, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/figwheel/client.cljs"}, :name figwheel.client/enforce-project-plugin, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 29, :method-params ([opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 206, :end-line 206, :max-fixed-arity 1, :fn-var true, :arglists (quote ([opts])), :test true}, warning-append-state? {:protocol-inline nil, :meta {:arglists (quote ([msg-names])), :end-column 28, :end-line 62, :column 7, :line 62, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/figwheel/client.cljs"}, :name figwheel.client/warning-append-state?, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 28, :method-params ([msg-names]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 1, :fn-var true, :arglists (quote ([msg-names])), :test true}, config-defaults {:meta {:end-column 25, :end-line 254, :column 10, :line 254, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/figwheel/client.cljs"}, :file "resources/public/js/compiled/out/figwheel/client.cljs", :line 254, :column 1, :end-line 254, :end-column 25, :test true, :name figwheel.client/config-defaults}, compile-refail-state? {:protocol-inline nil, :meta {:arglists (quote ([msg-names])), :end-column 28, :end-line 74, :column 7, :line 74, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/figwheel/client.cljs"}, :name figwheel.client/compile-refail-state?, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 28, :method-params ([msg-names]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 1, :fn-var true, :arglists (quote ([msg-names])), :test true}, reload-file-state? {:protocol-inline nil, :meta {:arglists (quote ([msg-names opts])), :end-column 25, :end-line 54, :column 7, :line 54, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/figwheel/client.cljs"}, :name figwheel.client/reload-file-state?, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 25, :method-params ([msg-names opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 2, :fn-var true, :arglists (quote ([msg-names opts])), :test true}, default-on-compile-warning {:protocol-inline nil, :meta {:arglists (quote ([{:keys [message], :as w}])), :end-column 33, :end-line 241, :column 7, :line 241, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/figwheel/client.cljs"}, :name figwheel.client/default-on-compile-warning, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 33, :method-params ([p__32100]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 241, :end-line 241, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [message], :as w}])), :test true}, warning-state? {:protocol-inline nil, :meta {:arglists (quote ([msg-names])), :end-column 21, :end-line 65, :column 7, :line 65, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/figwheel/client.cljs"}, :name figwheel.client/warning-state?, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 21, :method-params ([msg-names]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 1, :fn-var true, :arglists (quote ([msg-names])), :test true}, default-before-load {:protocol-inline nil, :meta {:arglists (quote ([files])), :end-column 26, :end-line 245, :column 7, :line 245, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/figwheel/client.cljs"}, :name figwheel.client/default-before-load, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 26, :method-params ([files]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 245, :end-line 245, :max-fixed-arity 1, :fn-var true, :arglists (quote ([files])), :test true}, enable-repl-print! {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 25, :end-line 28, :column 7, :line 28, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/figwheel/client.cljs"}, :name figwheel.client/enable-repl-print!, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 25, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, truncate-stack-trace {:protocol-inline nil, :meta {:arglists (quote ([stack-str])), :end-column 27, :end-line 106, :column 7, :line 106, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/figwheel/client.cljs"}, :name figwheel.client/truncate-stack-trace, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 27, :method-params ([stack-str]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 106, :max-fixed-arity 1, :fn-var true, :arglists (quote ([stack-str])), :test true}}, :require-macros {cljs.repl cljs.repl, cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:order [:figwheel-event :callback-name :content :message :class :cause :msg-name :load-warninged-code :compile-warning :files-changed :compile-failed :css-files-changed :recur :files :file :else :status :value :stacktrace :base-path :exception :success :build-id :repl-eval :code :on-compile-fail :on-compile-warning :exception-data :autoload :project-id :heads-up-display :formatted-exception :debug :info :line :column :warn :load-unchanged-files :on-jsload :websocket-url :before-jsload :retry-count :url-rewriter :on-cssload :jsload-callback :enforce-project-plugin :file-reloader-plugin :comp-fail-warning-plugin :css-reloader-plugin :repl-plugin :heads-up-display-plugin :plugins :merge-plugins], :seen #{:figwheel-event :load-unchanged-files :file-reloader-plugin :cause :on-compile-warning :else :on-jsload :compile-failed :comp-fail-warning-plugin :content :css-reloader-plugin :warn :value :callback-name :file :on-compile-fail :recur :compile-warning :debug :heads-up-display-plugin :files-changed :repl-plugin :heads-up-display :merge-plugins :jsload-callback :column :build-id :css-files-changed :success :line :enforce-project-plugin :status :base-path :class :plugins :info :code :files :websocket-url :stacktrace :before-jsload :exception :msg-name :load-warninged-code :repl-eval :exception-data :project-id :retry-count :autoload :formatted-exception :url-rewriter :on-cssload :message}}, :doc nil}