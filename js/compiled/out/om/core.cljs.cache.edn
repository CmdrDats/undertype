;; Analyzed by ClojureScript 0.0-3211
{:use-macros nil, :excludes #{}, :name om.core, :imports {IdGenerator goog.ui.IdGenerator}, :requires {IdGenerator goog.ui.IdGenerator, gdom goog.dom, goog.dom goog.dom, dom om.dom, om.dom om.dom, cljsjs.react cljsjs.react}, :uses nil, :defs {set-state-nr! {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([owner v] [owner korks v]), :arglists ([owner v] [owner korks v]), :arglists-meta (nil nil)}, :arglists (quote ([owner v] [owner korks v])), :doc "EXPERIMENTAL: Same as set-state! but does not trigger re-render.", :end-column 20, :end-line 1279, :column 7, :line 1279, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :name om.core/set-state-nr!, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([owner v] [owner korks v]), :arglists ([owner v] [owner korks v]), :arglists-meta (nil nil)}, :method-params ([owner v] [owner korks v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1279, :end-line 1279, :max-fixed-arity 3, :fn-var true, :arglists ([owner v] [owner korks v]), :doc "EXPERIMENTAL: Same as set-state! but does not trigger re-render.", :test true}, get-props {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([x] [x korks]), :arglists ([x] [x korks]), :arglists-meta (nil nil)}, :arglists (quote ([x] [x korks])), :doc "Given an owning Pure node return the Om props. Analogous to React\n   component props.", :end-column 16, :end-line 184, :column 7, :line 184, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :name om.core/get-props, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([x] [x korks]), :arglists ([x] [x korks]), :arglists-meta (nil nil)}, :method-params ([x] [x korks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 184, :end-line 184, :max-fixed-arity 2, :fn-var true, :arglists ([x] [x korks]), :doc "Given an owning Pure node return the Om props. Analogous to React\n   component props.", :test true}, IOmRef {:meta {:protocol-info {:methods {-add-dep! [[this c]], -remove-dep! [[this c]], -refresh-deps! [[this]], -get-deps [[this]]}}, :protocol-symbol true, :doc nil, :end-column 20, :end-line 146, :column 14, :line 146, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol-symbol true, :name om.core/IOmRef, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 20, :column 1, :line 146, :protocol-info {:methods {-add-dep! [[this c]], -remove-dep! [[this c]], -refresh-deps! [[this]], -get-deps [[this]]}}, :info nil, :end-line 146, :impls #{om.core/x31114 om.core/x31108}, :doc nil, :test true}, refresh-props! {:meta {:declared true, :end-column 35, :end-line 747, :column 21, :line 747, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :file "resources/public/js/compiled/out/om/core.cljs", :line 747, :column 1, :end-line 747, :end-column 35, :declared true, :test true, :name om.core/refresh-props!}, root-cursor {:protocol-inline nil, :meta {:arglists (quote ([atom])), :doc "Given an application state atom return a root cursor for it.", :end-column 18, :end-line 749, :column 7, :line 749, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :name om.core/root-cursor, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 18, :method-params ([atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 749, :end-line 749, :max-fixed-arity 1, :fn-var true, :arglists (quote ([atom])), :doc "Given an application state atom return a root cursor for it.", :test true}, -to-cursor {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([value state] [value state path]), :arglists ([value state] [value state path]), :arglists-meta (nil nil)}, :arglists (quote ([value state] [value state path])), :doc nil, :protocol om.core/IToCursor, :end-column 14, :end-line 94, :column 4, :line 94, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol om.core/IToCursor, :name om.core/-to-cursor, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([value state] [value state path]), :arglists ([value state] [value state path]), :arglists-meta (nil nil)}, :method-params ([value state] [value state path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :end-line 94, :max-fixed-arity 3, :fn-var true, :arglists ([value state] [value state path]), :doc nil, :test true}, cursor? {:protocol-inline nil, :meta {:arglists (quote ([x])), :end-column 14, :end-line 172, :column 7, :line 172, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :name om.core/cursor?, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 172, :end-line 172, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, IAdapt {:meta {:protocol-info {:methods {-adapt [[this other]]}}, :protocol-symbol true, :doc nil, :end-column 20, :end-line 135, :column 14, :line 135, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol-symbol true, :name om.core/IAdapt, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 20, :column 1, :line 135, :protocol-info {:methods {-adapt [[this other]]}}, :info nil, :end-line 135, :impls #{om.core/x31106 om.core/x31231 om.core/x31230 default om.core/x31105}, :doc nil, :test true}, -root-key {:protocol-inline nil, :meta {:arglists (quote ([cursor])), :doc nil, :protocol om.core/IRootKey, :end-column 13, :end-line 133, :column 4, :line 133, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol om.core/IRootKey, :name om.core/-root-key, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 13, :method-params ([cursor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 132, :end-line 133, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cursor])), :doc nil, :test true}, INotify {:meta {:protocol-info {:methods {-listen! [[x key tx-listen]], -unlisten! [[x key]], -notify! [[x tx-data root-cursor]]}}, :protocol-symbol true, :doc nil, :end-column 21, :end-line 119, :column 14, :line 119, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol-symbol true, :name om.core/INotify, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 21, :column 1, :line 119, :protocol-info {:methods {-listen! [[x key tx-listen]], -unlisten! [[x key]], -notify! [[x tx-data root-cursor]]}}, :info nil, :end-line 119, :impls #{om.core/x31194 om.core/x31186}, :doc nil, :test true}, get-node {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([owner] [owner name]), :arglists ([owner] [owner name]), :arglists-meta (nil nil)}, :arglists (quote ([owner] [owner name])), :doc "A helper function to get at React refs. Given a owning pure node\n  extract the ref specified by name.", :end-column 15, :end-line 1252, :column 7, :line 1252, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :name om.core/get-node, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([owner] [owner name]), :arglists ([owner] [owner name]), :arglists-meta (nil nil)}, :method-params ([owner] [owner name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1252, :end-line 1252, :max-fixed-arity 2, :fn-var true, :arglists ([owner] [owner name]), :doc "A helper function to get at React refs. Given a owning pure node\n  extract the ref specified by name.", :test true}, IInitState {:meta {:protocol-info {:methods {init-state [[this]]}}, :protocol-symbol true, :doc nil, :end-column 24, :end-line 22, :column 14, :line 22, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol-symbol true, :name om.core/IInitState, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 24, :column 1, :line 22, :protocol-info {:methods {init-state [[this]]}}, :info nil, :end-line 22, :impls #{}, :doc nil, :test true}, get-render-state {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([owner] [owner korks]), :arglists ([owner] [owner korks]), :arglists-meta (nil nil)}, :arglists (quote ([owner] [owner korks])), :doc "Takes a pure owning component and an optional key or sequential\n   list of keys and returns a property in the component local state if\n   it exists. Always returns the rendered state, not the pending\n   state.", :end-column 23, :end-line 1315, :column 7, :line 1315, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :name om.core/get-render-state, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 23, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([owner] [owner korks]), :arglists ([owner] [owner korks]), :arglists-meta (nil nil)}, :method-params ([owner] [owner korks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1315, :end-line 1315, :max-fixed-arity 2, :fn-var true, :arglists ([owner] [owner korks]), :doc "Takes a pure owning component and an optional key or sequential\n   list of keys and returns a property in the component local state if\n   it exists. Always returns the rendered state, not the pending\n   state.", :test true}, -refresh-deps! {:protocol-inline nil, :meta {:arglists (quote ([this])), :doc nil, :protocol om.core/IOmRef, :end-column 18, :end-line 149, :column 4, :line 149, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol om.core/IOmRef, :name om.core/-refresh-deps!, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 146, :end-line 149, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil, :test true}, get-renderT {:protocol-inline nil, :meta {:arglists (quote ([state])), :private true, :end-column 28, :end-line 845, :column 17, :line 845, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :private true, :name om.core/get-renderT, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 28, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 845, :end-line 845, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state])), :test true}, -add-dep! {:protocol-inline nil, :meta {:arglists (quote ([this c])), :doc nil, :protocol om.core/IOmRef, :end-column 13, :end-line 147, :column 4, :line 147, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol om.core/IOmRef, :name om.core/-add-dep!, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 13, :method-params ([this c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 146, :end-line 147, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this c])), :doc nil, :test true}, *root-key* {:meta {:private true, :dynamic true, :end-column 47, :end-line 12, :column 37, :line 12, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :private true, :name om.core/*root-key*, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 47, :column 1, :dynamic true, :line 12, :end-line 12, :test true}, refresh! {:protocol-inline nil, :meta {:arglists (quote ([owner])), :doc "Utility to re-render an owner.", :end-column 15, :end-line 1309, :column 7, :line 1309, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :name om.core/refresh!, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 15, :method-params ([owner]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1309, :end-line 1309, :max-fixed-arity 1, :fn-var true, :arglists (quote ([owner])), :doc "Utility to re-render an owner.", :test true}, should-update {:protocol-inline nil, :meta {:arglists (quote ([this next-props next-state])), :doc nil, :protocol om.core/IShouldUpdate, :end-column 17, :end-line 26, :column 4, :line 26, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol om.core/IShouldUpdate, :name om.core/should-update, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 17, :method-params ([this next-props next-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 26, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this next-props next-state])), :doc nil, :test true}, transactable? {:protocol-inline nil, :meta {:arglists (quote ([x])), :end-column 20, :end-line 1199, :column 7, :line 1199, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :name om.core/transactable?, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 20, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1199, :end-line 1199, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, refresh-set {:meta {:private true, :end-column 27, :end-line 843, :column 16, :line 843, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :file "resources/public/js/compiled/out/om/core.cljs", :line 843, :column 1, :end-line 843, :end-column 27, :private true, :test true, :name om.core/refresh-set}, ICursorDerive {:meta {:protocol-info {:methods {-derive [[cursor derived state path]]}}, :protocol-symbol true, :doc nil, :end-column 27, :end-line 96, :column 14, :line 96, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol-symbol true, :name om.core/ICursorDerive, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 27, :column 1, :line 96, :protocol-info {:methods {-derive [[cursor derived state path]]}}, :info nil, :end-line 96, :impls #{om.core/x31106 default om.core/x31114 om.core/x31105 om.core/x31108}, :doc nil, :test true}, ref-sub-cursor {:protocol-inline nil, :meta {:arglists (quote ([x parent])), :end-column 21, :end-line 757, :column 7, :line 757, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :name om.core/ref-sub-cursor, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 21, :method-params ([x parent]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 757, :end-line 757, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x parent])), :test true}, ICheckState {:meta {:protocol-info {:methods {}}, :protocol-symbol true, :doc nil, :end-column 25, :end-line 57, :column 14, :line 57, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol-symbol true, :name om.core/ICheckState, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 25, :column 1, :line 57, :protocol-info {:methods {}}, :info nil, :end-line 57, :impls #{}, :doc nil, :test true}, render-state {:protocol-inline nil, :meta {:arglists (quote ([this state])), :doc nil, :protocol om.core/IRenderState, :end-column 16, :end-line 53, :column 4, :line 53, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol om.core/IRenderState, :name om.core/render-state, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 16, :method-params ([this state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 53, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this state])), :doc nil, :test true}, render-all {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [state]), :arglists ([] [state]), :arglists-meta (nil nil)}, :arglists (quote ([] [state])), :doc "Force a render of *all* roots. Usage of this function is almost\n  never recommended.", :end-column 17, :end-line 848, :column 7, :line 848, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :name om.core/render-all, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [state]), :arglists ([] [state]), :arglists-meta (nil nil)}, :method-params ([] [state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 848, :end-line 848, :max-fixed-arity 1, :fn-var true, :arglists ([] [state]), :doc "Force a render of *all* roots. Usage of this function is almost\n  never recommended.", :test true}, specify-state-methods! {:protocol-inline nil, :meta {:arglists (quote ([obj])), :end-column 29, :end-line 403, :column 7, :line 403, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :name om.core/specify-state-methods!, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 29, :method-params ([obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 403, :end-line 403, :max-fixed-arity 1, :fn-var true, :arglists (quote ([obj])), :test true}, update-refs {:protocol-inline nil, :meta {:arglists (quote ([c])), :end-column 18, :end-line 251, :column 7, :line 251, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :name om.core/update-refs, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 18, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 251, :end-line 251, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :test true}, -get-deps {:protocol-inline nil, :meta {:arglists (quote ([this])), :doc nil, :protocol om.core/IOmRef, :end-column 13, :end-line 150, :column 4, :line 150, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol om.core/IOmRef, :name om.core/-get-deps, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 146, :end-line 150, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil, :test true}, path {:meta {:declared true, :end-column 22, :end-line 152, :column 18, :line 152, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :file "resources/public/js/compiled/out/om/core.cljs", :line 152, :column 1, :end-line 152, :end-column 22, :declared true, :test true, :name om.core/path}, ICursor {:meta {:protocol-info {:methods {-path [[cursor]], -state [[cursor]]}}, :protocol-symbol true, :doc nil, :end-column 21, :end-line 89, :column 14, :line 89, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol-symbol true, :name om.core/ICursor, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 21, :column 1, :line 89, :protocol-info {:methods {-path [[cursor]], -state [[cursor]]}}, :info nil, :end-line 89, :impls #{om.core/x31096 om.core/MapCursor om.core/x31097 om.core/IndexedCursor}, :doc nil, :test true}, -get-queue {:protocol-inline nil, :meta {:arglists (quote ([this])), :doc nil, :protocol om.core/IRenderQueue, :end-column 14, :end-line 78, :column 4, :line 78, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol om.core/IRenderQueue, :name om.core/-get-queue, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 78, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil, :test true}, did-mount {:protocol-inline nil, :meta {:arglists (quote ([this])), :doc nil, :protocol om.core/IDidMount, :end-column 13, :end-line 32, :column 4, :line 32, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol om.core/IDidMount, :name om.core/did-mount, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil, :test true}, merge-props-state {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([owner] [owner props]), :arglists ([owner] [owner props]), :arglists-meta (nil nil)}, :arglists (quote ([owner] [owner props])), :private true, :end-column 34, :end-line 234, :column 17, :line 234, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :private true, :name om.core/merge-props-state, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 34, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([owner] [owner props]), :arglists ([owner] [owner props]), :arglists-meta (nil nil)}, :method-params ([owner] [owner props]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 234, :end-line 234, :max-fixed-arity 2, :fn-var true, :arglists ([owner] [owner props]), :test true}, -set-property! {:protocol-inline nil, :meta {:arglists (quote ([this id p val])), :doc nil, :protocol om.core/IRootProperties, :end-column 18, :end-line 126, :column 4, :line 126, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol om.core/IRootProperties, :name om.core/-set-property!, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 18, :method-params ([this id p val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 125, :end-line 126, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this id p val])), :doc nil, :test true}, *descriptor* {:meta {:private true, :dynamic true, :end-column 49, :end-line 10, :column 37, :line 10, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :private true, :name om.core/*descriptor*, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 49, :column 1, :dynamic true, :line 10, :end-line 10, :test true}, -derive {:protocol-inline nil, :meta {:arglists (quote ([cursor derived state path])), :doc nil, :protocol om.core/ICursorDerive, :end-column 11, :end-line 97, :column 4, :line 97, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol om.core/ICursorDerive, :name om.core/-derive, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 11, :method-params ([cursor derived state path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 96, :end-line 97, :max-fixed-arity 4, :fn-var true, :arglists (quote ([cursor derived state path])), :doc nil, :test true}, ISetState {:meta {:protocol-info {:methods {-set-state! [[this val render] [this ks val render]]}}, :protocol-symbol true, :doc nil, :end-column 23, :end-line 71, :column 14, :line 71, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol-symbol true, :name om.core/ISetState, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 23, :column 1, :line 71, :protocol-info {:methods {-set-state! [[this val render] [this ks val render]]}}, :info nil, :end-line 71, :impls #{om.core/x31086 om.core/x31058 om.core/x31087 om.core/x31059}, :doc nil, :test true}, ref-cursor {:protocol-inline nil, :meta {:arglists (quote ([cursor])), :doc "Given a cursor return a reference cursor that inherits all of the\n  properties and methods of the cursor. Reference cursors may be\n  observed via om.core/observe.", :end-column 17, :end-line 776, :column 7, :line 776, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :name om.core/ref-cursor, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 17, :method-params ([cursor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 776, :end-line 776, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cursor])), :doc "Given a cursor return a reference cursor that inherits all of the\n  properties and methods of the cursor. Reference cursors may be\n  observed via om.core/observe.", :test true}, children {:protocol-inline nil, :meta {:arglists (quote ([node])), :private true, :end-column 25, :end-line 178, :column 17, :line 178, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :private true, :name om.core/children, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 25, :method-params ([node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 178, :end-line 178, :max-fixed-arity 1, :fn-var true, :arglists (quote ([node])), :test true}, IToCursor {:meta {:protocol-info {:methods {-to-cursor [[value state] [value state path]]}}, :protocol-symbol true, :doc nil, :end-column 23, :end-line 93, :column 14, :line 93, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol-symbol true, :name om.core/IToCursor, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 23, :column 1, :line 93, :protocol-info {:methods {-to-cursor [[value state] [value state path]]}}, :info nil, :end-line 93, :impls #{}, :doc nil, :test true}, -remove-dep! {:protocol-inline nil, :meta {:arglists (quote ([this c])), :doc nil, :protocol om.core/IOmRef, :end-column 16, :end-line 148, :column 4, :line 148, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol om.core/IOmRef, :name om.core/-remove-dep!, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 16, :method-params ([this c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 146, :end-line 148, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this c])), :doc nil, :test true}, -set-state! {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 4, :method-params ([this val render] [this ks val render]), :arglists ([this val render] [this ks val render]), :arglists-meta (nil nil)}, :arglists (quote ([this val render] [this ks val render])), :doc nil, :protocol om.core/ISetState, :end-column 15, :end-line 72, :column 4, :line 72, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol om.core/ISetState, :name om.core/-set-state!, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([this val render] [this ks val render]), :arglists ([this val render] [this ks val render]), :arglists-meta (nil nil)}, :method-params ([this val render] [this ks val render]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 72, :max-fixed-arity 4, :fn-var true, :arglists ([this val render] [this ks val render]), :doc nil, :test true}, -state {:protocol-inline nil, :meta {:arglists (quote ([cursor])), :doc nil, :protocol om.core/ICursor, :end-column 10, :end-line 91, :column 4, :line 91, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol om.core/ICursor, :name om.core/-state, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 10, :method-params ([cursor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 89, :end-line 91, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cursor])), :doc nil, :test true}, will-unmount {:protocol-inline nil, :meta {:arglists (quote ([this])), :doc nil, :protocol om.core/IWillUnmount, :end-column 16, :end-line 35, :column 4, :line 35, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol om.core/IWillUnmount, :name om.core/will-unmount, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil, :test true}, unobserve {:protocol-inline nil, :meta {:arglists (quote ([c ref])), :end-column 16, :end-line 834, :column 7, :line 834, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :name om.core/unobserve, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 16, :method-params ([c ref]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 834, :end-line 834, :max-fixed-arity 2, :fn-var true, :arglists (quote ([c ref])), :test true}, *state* {:meta {:private true, :dynamic true, :end-column 44, :end-line 11, :column 37, :line 11, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :private true, :name om.core/*state*, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 44, :column 1, :dynamic true, :line 11, :end-line 11, :test true}, -remove-property! {:protocol-inline nil, :meta {:arglists (quote ([this id p])), :doc nil, :protocol om.core/IRootProperties, :end-column 21, :end-line 127, :column 4, :line 127, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol om.core/IRootProperties, :name om.core/-remove-property!, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 21, :method-params ([this id p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 125, :end-line 127, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this id p])), :doc nil, :test true}, -unlisten! {:protocol-inline nil, :meta {:arglists (quote ([x key])), :doc nil, :protocol om.core/INotify, :end-column 14, :end-line 121, :column 4, :line 121, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol om.core/INotify, :name om.core/-unlisten!, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 14, :method-params ([x key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 119, :end-line 121, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x key])), :doc nil, :test true}, set-state! {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([owner v] [owner korks v]), :arglists ([owner v] [owner korks v]), :arglists-meta (nil nil)}, :arglists (quote ([owner v] [owner korks v])), :doc "Takes a pure owning component, a sequential list of keys and value and\n   sets the state of the component. Conceptually analagous to React\n   setState. Will schedule an Om re-render.", :end-column 17, :end-line 1267, :column 7, :line 1267, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :name om.core/set-state!, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([owner v] [owner korks v]), :arglists ([owner v] [owner korks v]), :arglists-meta (nil nil)}, :method-params ([owner v] [owner korks v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1267, :end-line 1267, :max-fixed-arity 3, :fn-var true, :arglists ([owner v] [owner korks v]), :doc "Takes a pure owning component, a sequential list of keys and value and\n   sets the state of the component. Conceptually analagous to React\n   setState. Will schedule an Om re-render.", :test true}, getf {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f cursor] [f cursor opts]), :arglists ([f cursor] [f cursor opts]), :arglists-meta (nil nil)}, :arglists (quote ([f cursor] [f cursor opts])), :end-column 11, :end-line 886, :column 7, :line 886, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :name om.core/getf, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f cursor] [f cursor opts]), :arglists ([f cursor] [f cursor opts]), :arglists-meta (nil nil)}, :method-params ([f cursor] [f cursor opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 886, :end-line 886, :max-fixed-arity 3, :fn-var true, :arglists ([f cursor] [f cursor opts]), :test true}, IDidMount {:meta {:protocol-info {:methods {did-mount [[this]]}}, :protocol-symbol true, :doc nil, :end-column 23, :end-line 31, :column 14, :line 31, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol-symbol true, :name om.core/IDidMount, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 23, :column 1, :line 31, :protocol-info {:methods {did-mount [[this]]}}, :info nil, :end-line 31, :impls #{}, :doc nil, :test true}, to-cursor {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([val] [val state] [val state path]), :arglists ([val] [val state] [val state path]), :arglists-meta (nil nil nil)}, :arglists (quote ([val] [val state] [val state path])), :private true, :end-column 26, :end-line 728, :column 17, :line 728, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :private true, :name om.core/to-cursor, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 26, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([val] [val state] [val state path]), :arglists ([val] [val state] [val state path]), :arglists-meta (nil nil nil)}, :method-params ([val] [val state] [val state path]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 728, :end-line 728, :max-fixed-arity 3, :fn-var true, :arglists ([val] [val state] [val state path]), :test true}, to-cursor* {:protocol-inline nil, :meta {:arglists (quote ([val state path])), :private true, :end-column 27, :end-line 711, :column 17, :line 711, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :private true, :name om.core/to-cursor*, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 27, :method-params ([val state path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 711, :end-line 711, :max-fixed-arity 3, :fn-var true, :arglists (quote ([val state path])), :test true}, get-shared {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([owner] [owner korks]), :arglists ([owner] [owner korks]), :arglists-meta (nil nil)}, :arglists (quote ([owner] [owner korks])), :doc "Takes an owner and returns a map of global shared values for a\n   render loop. An optional key or sequence of keys may be given to\n   extract a specific value.", :end-column 17, :end-line 208, :column 7, :line 208, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :name om.core/get-shared, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([owner] [owner korks]), :arglists ([owner] [owner korks]), :arglists-meta (nil nil)}, :method-params ([owner] [owner korks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 208, :end-line 208, :max-fixed-arity 2, :fn-var true, :arglists ([owner] [owner korks]), :doc "Takes an owner and returns a map of global shared values for a\n   render loop. An optional key or sequence of keys may be given to\n   extract a specific value.", :test true}, valid? {:protocol-inline nil, :meta {:arglists (quote ([x])), :end-column 13, :end-line 559, :column 7, :line 559, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :name om.core/valid?, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 559, :end-line 559, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, observe {:protocol-inline nil, :meta {:arglists (quote ([c ref])), :doc "Given a component and a reference cursor have the component observe\n  the reference cursor for any data changes.", :end-column 14, :end-line 825, :column 7, :line 825, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :name om.core/observe, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 14, :method-params ([c ref]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 825, :end-line 825, :max-fixed-arity 2, :fn-var true, :arglists (quote ([c ref])), :doc "Given a component and a reference cursor have the component observe\n  the reference cursor for any data changes.", :test true}, IndexedCursor {:num-fields 3, :protocols #{om.core/IValue cljs.core/IIndexed cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection om.core/ITransact cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack om.core/ICursor cljs.core/IDeref cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup}, :name om.core/IndexedCursor, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 23, :type true, :column 10, :line 634, :record false, :end-line 634, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IDeref cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup}}, add-ref-to-component! {:protocol-inline nil, :meta {:arglists (quote ([c ref])), :end-column 28, :end-line 813, :column 7, :line 813, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :name om.core/add-ref-to-component!, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 28, :method-params ([c ref]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 813, :end-line 813, :max-fixed-arity 2, :fn-var true, :arglists (quote ([c ref])), :test true}, commit! {:protocol-inline nil, :meta {:arglists (quote ([cursor korks f])), :doc "EXPERIMENTAL: Like transact! but does not schedule a re-render or\n  create a transact event.", :end-column 14, :end-line 1232, :column 7, :line 1232, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :name om.core/commit!, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 14, :method-params ([cursor korks f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1232, :end-line 1232, :max-fixed-arity 3, :fn-var true, :arglists (quote ([cursor korks f])), :doc "EXPERIMENTAL: Like transact! but does not schedule a re-render or\n  create a transact event.", :test true}, no-local-descriptor {:protocol-inline nil, :meta {:arglists (quote ([methods])), :end-column 26, :end-line 527, :column 7, :line 527, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :name om.core/no-local-descriptor, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 26, :method-params ([methods]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 527, :end-line 527, :max-fixed-arity 1, :fn-var true, :arglists (quote ([methods])), :test true}, IValue {:meta {:protocol-info {:methods {-value [[x]]}}, :protocol-symbol true, :doc nil, :end-column 20, :end-line 82, :column 14, :line 82, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol-symbol true, :name om.core/IValue, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 20, :column 1, :line 82, :protocol-info {:methods {-value [[x]]}}, :info nil, :end-line 82, :impls #{om.core/MapCursor default om.core/IndexedCursor}, :doc nil, :test true}, no-local-merge-pending-state {:protocol-inline nil, :meta {:arglists (quote ([owner])), :end-column 35, :end-line 451, :column 7, :line 451, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :name om.core/no-local-merge-pending-state, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 35, :method-params ([owner]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 451, :end-line 451, :max-fixed-arity 1, :fn-var true, :arglists (quote ([owner])), :test true}, ->MapCursor {:protocol-inline nil, :meta {:arglists (quote ([value state path])), :factory :positional, :skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IDeref cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{om.core/IValue cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection om.core/ITransact cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable om.core/ICursor cljs.core/IDeref cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 19, :end-line 564, :column 10, :line 564, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocols #{om.core/IValue cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection om.core/ITransact cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable om.core/ICursor cljs.core/IDeref cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name om.core/->MapCursor, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 19, :method-params ([value state path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 564, :end-line 564, :max-fixed-arity 3, :fn-var true, :arglists (quote ([value state path])), :skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IDeref cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :test true}, -get-property {:protocol-inline nil, :meta {:arglists (quote ([this id p])), :doc nil, :protocol om.core/IRootProperties, :end-column 17, :end-line 129, :column 4, :line 129, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol om.core/IRootProperties, :name om.core/-get-property, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 17, :method-params ([this id p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 125, :end-line 129, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this id p])), :doc nil, :test true}, mounted? {:protocol-inline nil, :meta {:arglists (quote ([owner])), :doc "Return true if the backing React component is mounted into the DOM.", :end-column 15, :end-line 1262, :column 7, :line 1262, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :name om.core/mounted?, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 15, :method-params ([owner]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1262, :end-line 1262, :max-fixed-arity 1, :fn-var true, :arglists (quote ([owner])), :doc "Return true if the backing React component is mounted into the DOM.", :test true}, IWillUpdate {:meta {:protocol-info {:methods {will-update [[this next-props next-state]]}}, :protocol-symbol true, :doc nil, :end-column 25, :end-line 37, :column 14, :line 37, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol-symbol true, :name om.core/IWillUpdate, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 25, :column 1, :line 37, :protocol-info {:methods {will-update [[this next-props next-state]]}}, :info nil, :end-line 37, :impls #{}, :doc nil, :test true}, IRenderQueue {:meta {:protocol-info {:methods {-get-queue [[this]], -queue-render! [[this c]], -empty-queue! [[this]]}}, :protocol-symbol true, :doc nil, :end-column 26, :end-line 77, :column 14, :line 77, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol-symbol true, :name om.core/IRenderQueue, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 26, :column 1, :line 77, :protocol-info {:methods {-get-queue [[this]], -queue-render! [[this c]], -empty-queue! [[this]]}}, :info nil, :end-line 77, :impls #{om.core/x31194 om.core/x31186}, :doc nil, :test true}, tag-root-key {:protocol-inline nil, :meta {:arglists (quote ([cursor root-key])), :end-column 19, :end-line 1052, :column 7, :line 1052, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :name om.core/tag-root-key, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 19, :method-params ([cursor root-key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1052, :end-line 1052, :max-fixed-arity 2, :fn-var true, :arglists (quote ([cursor root-key])), :test true}, -listen! {:protocol-inline nil, :meta {:arglists (quote ([x key tx-listen])), :doc nil, :protocol om.core/INotify, :end-column 12, :end-line 120, :column 4, :line 120, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol om.core/INotify, :name om.core/-listen!, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 12, :method-params ([x key tx-listen]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 119, :end-line 120, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x key tx-listen])), :doc nil, :test true}, valid-opts? {:protocol-inline nil, :meta {:arglists (quote ([m])), :private true, :end-column 28, :end-line 868, :column 17, :line 868, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :private true, :name om.core/valid-opts?, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 28, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 868, :end-line 868, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :test true}, value {:protocol-inline nil, :meta {:arglists (quote ([cursor])), :end-column 12, :end-line 109, :column 7, :line 109, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :name om.core/value, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 12, :method-params ([cursor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 109, :end-line 109, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cursor])), :test true}, get-state {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([owner] [owner korks]), :arglists ([owner] [owner korks]), :arglists-meta (nil nil)}, :arglists (quote ([owner] [owner korks])), :doc "Returns the component local state of an owning component. owner is\n   the component. An optional key or sequence of keys may be given to\n   extract a specific value. Always returns pending state.", :end-column 16, :end-line 196, :column 7, :line 196, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :name om.core/get-state, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([owner] [owner korks]), :arglists ([owner] [owner korks]), :arglists-meta (nil nil)}, :method-params ([owner] [owner korks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 196, :end-line 196, :max-fixed-arity 2, :fn-var true, :arglists ([owner] [owner korks]), :doc "Returns the component local state of an owning component. owner is\n   the component. An optional key or sequence of keys may be given to\n   extract a specific value. Always returns pending state.", :test true}, merge-pending-state {:protocol-inline nil, :meta {:arglists (quote ([owner])), :private true, :end-column 36, :end-line 226, :column 17, :line 226, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :private true, :name om.core/merge-pending-state, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 36, :method-params ([owner]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 226, :end-line 226, :max-fixed-arity 1, :fn-var true, :arglists (quote ([owner])), :test true}, *parent* {:meta {:private true, :dynamic true, :end-column 45, :end-line 8, :column 37, :line 8, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :private true, :name om.core/*parent*, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 45, :column 1, :dynamic true, :line 8, :end-line 8, :test true}, adapt {:protocol-inline nil, :meta {:arglists (quote ([x other])), :end-column 12, :end-line 143, :column 7, :line 143, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :name om.core/adapt, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 12, :method-params ([x other]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 143, :end-line 143, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x other])), :test true}, IRenderProps {:meta {:protocol-info {:methods {render-props [[this props state]]}}, :protocol-symbol true, :doc nil, :end-column 26, :end-line 49, :column 14, :line 49, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol-symbol true, :name om.core/IRenderProps, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 26, :column 1, :line 49, :protocol-info {:methods {render-props [[this props state]]}}, :info nil, :end-line 49, :impls #{}, :doc nil, :test true}, get-gstate {:protocol-inline nil, :meta {:arglists (quote ([owner])), :end-column 17, :end-line 448, :column 7, :line 448, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :name om.core/get-gstate, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 17, :method-params ([owner]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 448, :end-line 448, :max-fixed-arity 1, :fn-var true, :arglists (quote ([owner])), :test true}, update-state! {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([owner f] [owner korks f]), :arglists ([owner f] [owner korks f]), :arglists-meta (nil nil)}, :arglists (quote ([owner f] [owner korks f])), :doc "Takes a pure owning component, a sequential list of keys and a\n   function to transition the state of the component. Conceptually\n   analagous to React setState. Will schedule an Om re-render.", :end-column 20, :end-line 1289, :column 7, :line 1289, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :name om.core/update-state!, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([owner f] [owner korks f]), :arglists ([owner f] [owner korks f]), :arglists-meta (nil nil)}, :method-params ([owner f] [owner korks f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1289, :end-line 1289, :max-fixed-arity 3, :fn-var true, :arglists ([owner f] [owner korks f]), :doc "Takes a pure owning component, a sequential list of keys and a\n   function to transition the state of the component. Conceptually\n   analagous to React setState. Will schedule an Om re-render.", :test true}, build* {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f cursor] [f cursor m]), :arglists ([f cursor] [f cursor m]), :arglists-meta (nil nil)}, :arglists (quote ([f cursor] [f cursor m])), :end-column 13, :end-line 898, :column 7, :line 898, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :name om.core/build*, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f cursor] [f cursor m]), :arglists ([f cursor] [f cursor m]), :arglists-meta (nil nil)}, :method-params ([f cursor] [f cursor m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 898, :end-line 898, :max-fixed-arity 3, :fn-var true, :arglists ([f cursor] [f cursor m]), :test true}, tear-down {:protocol-inline nil, :meta {:arglists (quote ([state key])), :private true, :end-column 26, :end-line 1049, :column 17, :line 1049, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :private true, :name om.core/tear-down, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 26, :method-params ([state key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1049, :end-line 1049, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state key])), :test true}, IRootProperties {:meta {:protocol-info {:methods {-set-property! [[this id p val]], -remove-property! [[this id p]], -remove-properties! [[this id]], -get-property [[this id p]]}}, :protocol-symbol true, :doc nil, :end-column 29, :end-line 125, :column 14, :line 125, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol-symbol true, :name om.core/IRootProperties, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 29, :column 1, :line 125, :protocol-info {:methods {-set-property! [[this id p val]], -remove-property! [[this id p]], -remove-properties! [[this id]], -get-property [[this id p]]}}, :info nil, :end-line 125, :impls #{om.core/x31194 om.core/x31186}, :doc nil, :test true}, *instrument* {:meta {:private true, :dynamic true, :end-column 49, :end-line 9, :column 37, :line 9, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :private true, :name om.core/*instrument*, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 49, :column 1, :dynamic true, :line 9, :end-line 9, :test true}, -get-render-state {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([this] [this ks]), :arglists ([this] [this ks]), :arglists-meta (nil nil)}, :arglists (quote ([this] [this ks])), :doc nil, :protocol om.core/IGetRenderState, :end-column 21, :end-line 69, :column 4, :line 69, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol om.core/IGetRenderState, :name om.core/-get-render-state, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 21, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([this] [this ks]), :arglists ([this] [this ks]), :arglists-meta (nil nil)}, :method-params ([this] [this ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 69, :max-fixed-arity 2, :fn-var true, :arglists ([this] [this ks]), :doc nil, :test true}, -queue-render! {:protocol-inline nil, :meta {:arglists (quote ([this c])), :doc nil, :protocol om.core/IRenderQueue, :end-column 18, :end-line 79, :column 4, :line 79, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol om.core/IRenderQueue, :name om.core/-queue-render!, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 18, :method-params ([this c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 79, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this c])), :doc nil, :test true}, IRootKey {:meta {:protocol-info {:methods {-root-key [[cursor]]}}, :protocol-symbol true, :doc nil, :end-column 22, :end-line 132, :column 14, :line 132, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol-symbol true, :name om.core/IRootKey, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 22, :column 1, :line 132, :protocol-info {:methods {-root-key [[cursor]]}}, :info nil, :end-line 132, :impls #{om.core/x31231 om.core/x31230}, :doc nil, :test true}, IOmSwap {:meta {:protocol-info {:methods {-om-swap! [[this cursor korks f tag]]}}, :protocol-symbol true, :doc nil, :end-column 21, :end-line 62, :column 14, :line 62, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol-symbol true, :name om.core/IOmSwap, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 21, :column 1, :line 62, :protocol-info {:methods {-om-swap! [[this cursor korks f tag]]}}, :info nil, :end-line 62, :impls #{}, :doc nil, :test true}, valid-component? {:protocol-inline nil, :meta {:arglists (quote ([x f])), :private true, :end-column 33, :end-line 860, :column 17, :line 860, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :private true, :name om.core/valid-component?, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 33, :method-params ([x f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 860, :end-line 860, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x f])), :test true}, pure-methods {:meta {:end-column 18, :end-line 272, :column 6, :line 272, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :file "resources/public/js/compiled/out/om/core.cljs", :line 272, :column 1, :end-line 272, :end-column 18, :test true, :name om.core/pure-methods}, init-state {:protocol-inline nil, :meta {:arglists (quote ([this])), :doc nil, :protocol om.core/IInitState, :end-column 14, :end-line 23, :column 4, :line 23, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol om.core/IInitState, :name om.core/init-state, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil, :test true}, -om-swap! {:protocol-inline nil, :meta {:arglists (quote ([this cursor korks f tag])), :doc nil, :protocol om.core/IOmSwap, :end-column 13, :end-line 63, :column 4, :line 63, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol om.core/IOmSwap, :name om.core/-om-swap!, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 13, :method-params ([this cursor korks f tag]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 63, :max-fixed-arity 5, :fn-var true, :arglists (quote ([this cursor korks f tag])), :doc nil, :test true}, IWillReceiveProps {:meta {:protocol-info {:methods {will-receive-props [[this next-props]]}}, :protocol-symbol true, :doc nil, :end-column 31, :end-line 43, :column 14, :line 43, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol-symbol true, :name om.core/IWillReceiveProps, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 31, :column 1, :line 43, :protocol-info {:methods {will-receive-props [[this next-props]]}}, :info nil, :end-line 43, :impls #{}, :doc nil, :test true}, state {:protocol-inline nil, :meta {:arglists (quote ([cursor])), :end-column 12, :end-line 112, :column 7, :line 112, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :name om.core/state, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 12, :method-params ([cursor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 112, :end-line 112, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cursor])), :test true}, IWillUnmount {:meta {:protocol-info {:methods {will-unmount [[this]]}}, :protocol-symbol true, :doc nil, :end-column 26, :end-line 34, :column 14, :line 34, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol-symbol true, :name om.core/IWillUnmount, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 26, :column 1, :line 34, :protocol-info {:methods {will-unmount [[this]]}}, :info nil, :end-line 34, :impls #{}, :doc nil, :test true}, IRender {:meta {:protocol-info {:methods {render [[this]]}}, :protocol-symbol true, :doc nil, :end-column 21, :end-line 46, :column 14, :line 46, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol-symbol true, :name om.core/IRender, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 21, :column 1, :line 46, :protocol-info {:methods {render [[this]]}}, :info nil, :end-line 46, :impls #{}, :doc nil, :test true}, update-state-nr! {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([owner f] [owner korks f]), :arglists ([owner f] [owner korks f]), :arglists-meta (nil nil)}, :arglists (quote ([owner f] [owner korks f])), :doc "EXPERIMENTAL: Same as update-state! but does not trigger re-render.", :end-column 23, :end-line 1300, :column 7, :line 1300, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :name om.core/update-state-nr!, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 23, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([owner f] [owner korks f]), :arglists ([owner f] [owner korks f]), :arglists-meta (nil nil)}, :method-params ([owner f] [owner korks f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1300, :end-line 1300, :max-fixed-arity 3, :fn-var true, :arglists ([owner f] [owner korks f]), :doc "EXPERIMENTAL: Same as update-state! but does not trigger re-render.", :test true}, ITransact {:meta {:protocol-info {:methods {-transact! [[cursor korks f tag]]}}, :protocol-symbol true, :doc nil, :end-column 23, :end-line 115, :column 14, :line 115, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol-symbol true, :name om.core/ITransact, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 23, :column 1, :line 115, :protocol-info {:methods {-transact! [[cursor korks f tag]]}}, :info nil, :end-line 115, :impls #{om.core/x31106 om.core/x31096 om.core/MapCursor om.core/x31114 om.core/x31105 om.core/x31108 om.core/x31097 om.core/IndexedCursor}, :doc nil, :test true}, transact! {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 4, :method-params ([cursor f] [cursor korks f] [cursor korks f tag]), :arglists ([cursor f] [cursor korks f] [cursor korks f tag]), :arglists-meta (nil nil nil)}, :arglists (quote ([cursor f] [cursor korks f] [cursor korks f tag])), :doc "Given a tag, a cursor, an optional list of keys ks, mutate the tree\n  at the path specified by the cursor + the optional keys by applying\n  f to the specified value in the tree. An Om re-render will be\n  triggered.", :end-column 16, :end-line 1202, :column 7, :line 1202, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :name om.core/transact!, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([cursor f] [cursor korks f] [cursor korks f tag]), :arglists ([cursor f] [cursor korks f] [cursor korks f tag]), :arglists-meta (nil nil nil)}, :method-params ([cursor f] [cursor korks f] [cursor korks f tag]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1202, :end-line 1202, :max-fixed-arity 4, :fn-var true, :arglists ([cursor f] [cursor korks f] [cursor korks f tag]), :doc "Given a tag, a cursor, an optional list of keys ks, mutate the tree\n  at the path specified by the cursor + the optional keys by applying\n  f to the specified value in the tree. An Om re-render will be\n  triggered.", :test true}, no-local-state-methods {:meta {:end-column 28, :end-line 464, :column 6, :line 464, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :file "resources/public/js/compiled/out/om/core.cljs", :line 464, :column 1, :end-line 464, :end-column 28, :test true, :name om.core/no-local-state-methods}, roots {:meta {:private true, :end-column 21, :end-line 858, :column 16, :line 858, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :file "resources/public/js/compiled/out/om/core.cljs", :line 858, :column 1, :end-line 858, :end-column 21, :private true, :test true, :name om.core/roots}, ref-changed? {:protocol-inline nil, :meta {:arglists (quote ([ref])), :end-column 19, :end-line 246, :column 7, :line 246, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :name om.core/ref-changed?, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 19, :method-params ([ref]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 246, :end-line 246, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ref])), :test true}, build-all {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f xs] [f xs m]), :arglists ([f xs] [f xs m]), :arglists-meta (nil nil)}, :arglists (quote ([f xs] [f xs m])), :doc "Build a sequence of components. f is the component constructor\n   function, xs a sequence of values, and m a map of options the\n   same as provided to om.core/build.", :end-column 16, :end-line 1001, :column 7, :line 1001, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :name om.core/build-all, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f xs] [f xs m]), :arglists ([f xs] [f xs m]), :arglists-meta (nil nil)}, :method-params ([f xs] [f xs m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1001, :end-line 1001, :max-fixed-arity 3, :fn-var true, :arglists ([f xs] [f xs m]), :doc "Build a sequence of components. f is the component constructor\n   function, xs a sequence of values, and m a map of options the\n   same as provided to om.core/build.", :test true}, IRenderState {:meta {:protocol-info {:methods {render-state [[this state]]}}, :protocol-symbol true, :doc nil, :end-column 26, :end-line 52, :column 14, :line 52, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol-symbol true, :name om.core/IRenderState, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 26, :column 1, :line 52, :protocol-info {:methods {render-state [[this state]]}}, :info nil, :end-line 52, :impls #{}, :doc nil, :test true}, -adapt {:protocol-inline nil, :meta {:arglists (quote ([this other])), :doc nil, :protocol om.core/IAdapt, :end-column 10, :end-line 136, :column 4, :line 136, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol om.core/IAdapt, :name om.core/-adapt, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 10, :method-params ([this other]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 135, :end-line 136, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this other])), :doc nil, :test true}, pure-descriptor {:meta {:end-column 21, :end-line 437, :column 6, :line 437, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :file "resources/public/js/compiled/out/om/core.cljs", :line 437, :column 1, :end-line 437, :end-column 21, :test true, :name om.core/pure-descriptor}, get-descriptor {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([f] [f descriptor]), :arglists ([f] [f descriptor]), :arglists-meta (nil nil)}, :arglists (quote ([f] [f descriptor])), :end-column 21, :end-line 876, :column 7, :line 876, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :name om.core/get-descriptor, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 21, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([f] [f descriptor]), :arglists ([f] [f descriptor]), :arglists-meta (nil nil)}, :method-params ([f] [f descriptor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 876, :end-line 876, :max-fixed-arity 2, :fn-var true, :arglists ([f] [f descriptor]), :test true}, _refs {:meta {:end-column 11, :end-line 755, :column 6, :line 755, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :file "resources/public/js/compiled/out/om/core.cljs", :line 755, :column 1, :end-line 755, :end-column 11, :test true, :name om.core/_refs}, did-update {:protocol-inline nil, :meta {:arglists (quote ([this prev-props prev-state])), :doc nil, :protocol om.core/IDidUpdate, :end-column 14, :end-line 41, :column 4, :line 41, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol om.core/IDidUpdate, :name om.core/did-update, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 14, :method-params ([this prev-props prev-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 41, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this prev-props prev-state])), :doc nil, :test true}, setup {:protocol-inline nil, :meta {:arglists (quote ([state key tx-listen])), :private true, :end-column 22, :end-line 1012, :column 17, :line 1012, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :private true, :name om.core/setup, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 22, :method-params ([state key tx-listen]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1012, :end-line 1012, :max-fixed-arity 3, :fn-var true, :arglists (quote ([state key tx-listen])), :test true}, notify* {:protocol-inline nil, :meta {:arglists (quote ([cursor tx-data])), :end-column 14, :end-line 740, :column 7, :line 740, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :name om.core/notify*, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 14, :method-params ([cursor tx-data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 740, :end-line 740, :max-fixed-arity 2, :fn-var true, :arglists (quote ([cursor tx-data])), :test true}, -notify! {:protocol-inline nil, :meta {:arglists (quote ([x tx-data root-cursor])), :doc nil, :protocol om.core/INotify, :end-column 12, :end-line 122, :column 4, :line 122, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol om.core/INotify, :name om.core/-notify!, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 12, :method-params ([x tx-data root-cursor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 119, :end-line 122, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x tx-data root-cursor])), :doc nil, :test true}, IDidUpdate {:meta {:protocol-info {:methods {did-update [[this prev-props prev-state]]}}, :protocol-symbol true, :doc nil, :end-column 24, :end-line 40, :column 14, :line 40, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol-symbol true, :name om.core/IDidUpdate, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 24, :column 1, :line 40, :protocol-info {:methods {did-update [[this prev-props prev-state]]}}, :info nil, :end-line 40, :impls #{}, :doc nil, :test true}, will-mount {:protocol-inline nil, :meta {:arglists (quote ([this])), :doc nil, :protocol om.core/IWillMount, :end-column 14, :end-line 29, :column 4, :line 29, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol om.core/IWillMount, :name om.core/will-mount, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil, :test true}, IWillMount {:meta {:protocol-info {:methods {will-mount [[this]]}}, :protocol-symbol true, :doc nil, :end-column 24, :end-line 28, :column 14, :line 28, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol-symbol true, :name om.core/IWillMount, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 24, :column 1, :line 28, :protocol-info {:methods {will-mount [[this]]}}, :info nil, :end-line 28, :impls #{}, :doc nil, :test true}, react-id {:protocol-inline nil, :meta {:arglists (quote ([x])), :end-column 15, :end-line 443, :column 7, :line 443, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :name om.core/react-id, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 15, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 443, :end-line 443, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, transact* {:protocol-inline nil, :meta {:arglists (quote ([state cursor korks f tag])), :end-column 16, :end-line 154, :column 7, :line 154, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :name om.core/transact*, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 16, :method-params ([state cursor korks f tag]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 154, :end-line 154, :max-fixed-arity 5, :fn-var true, :arglists (quote ([state cursor korks f tag])), :test true}, detach-root {:protocol-inline nil, :meta {:arglists (quote ([target])), :doc "Given a DOM target remove its render loop if one exists.", :end-column 18, :end-line 1192, :column 7, :line 1192, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :name om.core/detach-root, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 18, :method-params ([target]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1192, :end-line 1192, :max-fixed-arity 1, :fn-var true, :arglists (quote ([target])), :doc "Given a DOM target remove its render loop if one exists.", :test true}, -path {:protocol-inline nil, :meta {:arglists (quote ([cursor])), :doc nil, :protocol om.core/ICursor, :end-column 9, :end-line 90, :column 4, :line 90, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol om.core/ICursor, :name om.core/-path, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 9, :method-params ([cursor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 89, :end-line 90, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cursor])), :doc nil, :test true}, -get-state {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([this] [this ks]), :arglists ([this] [this ks]), :arglists-meta (nil nil)}, :arglists (quote ([this] [this ks])), :doc nil, :protocol om.core/IGetState, :end-column 14, :end-line 66, :column 4, :line 66, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol om.core/IGetState, :name om.core/-get-state, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([this] [this ks]), :arglists ([this] [this ks]), :arglists-meta (nil nil)}, :method-params ([this] [this ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 66, :max-fixed-arity 2, :fn-var true, :arglists ([this] [this ks]), :doc nil, :test true}, build {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f x] [f x m]), :arglists ([f x] [f x m]), :arglists-meta (nil nil)}, :arglists (quote ([f x] [f x m])), :doc "Builds an Om component. Takes an IRender/IRenderState instance\n   returning function f, a value, and an optional third argument\n   which may be a map of build specifications.\n\n   f - is a function of 2 or 3 arguments. The first argument can be\n   any value and the second argument will be the owning pure node.\n   If a map of options m is passed in this will be the third\n   argument. f must return at a minimum an IRender or IRenderState\n   instance, this instance may implement other React life cycle\n   protocols.\n\n   x - any value\n\n   m - a map the following keys are allowed:\n\n     :key        - a keyword that should be used to look up the key used by\n                   React itself when rendering sequential things.\n     :react-key  - an explicit react key\n     :fn         - a function to apply to the data before invoking f.\n     :init-state - a map of initial state to pass to the component.\n     :state      - a map of state to pass to the component, will be merged in.\n     :opts       - a map of values. Can be used to pass side information down\n                   the render tree.\n     :descriptor - a JS object of React methods, will be used to\n                   construct a React class per Om component function\n                   encountered. defaults to pure-descriptor.\n\n   Example:\n\n     (build list-of-gadgets x\n        {:init-state {:event-chan ...\n                      :narble ...}})\n  ", :end-column 12, :end-line 957, :column 7, :line 957, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :name om.core/build, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f x] [f x m]), :arglists ([f x] [f x m]), :arglists-meta (nil nil)}, :method-params ([f x] [f x m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 957, :end-line 957, :max-fixed-arity 3, :fn-var true, :arglists ([f x] [f x m]), :doc "Builds an Om component. Takes an IRender/IRenderState instance\n   returning function f, a value, and an optional third argument\n   which may be a map of build specifications.\n\n   f - is a function of 2 or 3 arguments. The first argument can be\n   any value and the second argument will be the owning pure node.\n   If a map of options m is passed in this will be the third\n   argument. f must return at a minimum an IRender or IRenderState\n   instance, this instance may implement other React life cycle\n   protocols.\n\n   x - any value\n\n   m - a map the following keys are allowed:\n\n     :key        - a keyword that should be used to look up the key used by\n                   React itself when rendering sequential things.\n     :react-key  - an explicit react key\n     :fn         - a function to apply to the data before invoking f.\n     :init-state - a map of initial state to pass to the component.\n     :state      - a map of state to pass to the component, will be merged in.\n     :opts       - a map of values. Can be used to pass side information down\n                   the render tree.\n     :descriptor - a JS object of React methods, will be used to\n                   construct a React class per Om component function\n                   encountered. defaults to pure-descriptor.\n\n   Example:\n\n     (build list-of-gadgets x\n        {:init-state {:event-chan ...\n                      :narble ...}})\n  ", :test true}, render {:protocol-inline nil, :meta {:arglists (quote ([this])), :doc nil, :protocol om.core/IRender, :end-column 10, :end-line 47, :column 4, :line 47, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol om.core/IRender, :name om.core/render, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 10, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 47, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil, :test true}, MapCursor {:num-fields 3, :protocols #{om.core/IValue cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection om.core/ITransact cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable om.core/ICursor cljs.core/IDeref cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name om.core/MapCursor, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 19, :type true, :column 10, :line 564, :record false, :end-line 564, :skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IDeref cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, -value {:protocol-inline nil, :meta {:arglists (quote ([x])), :doc nil, :protocol om.core/IValue, :end-column 10, :end-line 83, :column 4, :line 83, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol om.core/IValue, :name om.core/-value, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 10, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 83, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc nil, :test true}, IShouldUpdate {:meta {:protocol-info {:methods {should-update [[this next-props next-state]]}}, :protocol-symbol true, :doc nil, :end-column 27, :end-line 25, :column 14, :line 25, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol-symbol true, :name om.core/IShouldUpdate, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 27, :column 1, :line 25, :protocol-info {:methods {should-update [[this next-props next-state]]}}, :info nil, :end-line 25, :impls #{}, :doc nil, :test true}, root {:protocol-inline nil, :meta {:arglists (quote ([f value {:keys [target tx-listen path instrument descriptor adapt raf], :as options}])), :doc "Take a component constructor function f, value an immutable tree of\n   associative data structures optionally an wrapped in an IAtom\n   instance, and a map of options and installs an Om/React render\n   loop.\n\n   f must return an instance that at a minimum implements IRender or\n   IRenderState (it may implement other React life cycle protocols). f\n   must take at least two arguments, the root cursor and the owning pure\n   node. A cursor is just the original data wrapped in an ICursor\n   instance which maintains path information. Only one root render\n   loop allowed per target element. om.core/root is idempotent, if\n   called again on the same target element the previous render loop\n   will be replaced.\n\n   Options may also include any key allowed by om.core/build to\n   customize f. In addition om.core/root supports the following\n   special options:\n\n   :target     - (required) a DOM element. \n   :shared     - data to be shared by all components, see om.core/get-shared\n   :tx-listen  - a function that will listen in in transactions, should\n                 take 2 arguments - the first a map containing the\n                 path, old and new state at path, old and new global\n                 state, and transaction tag if provided.\n   :instrument - a function of three arguments that if provided will\n                 intercept all calls to om.core/build. This function should\n                 correspond to the three arity version of om.core/build.\n   :adapt      - a function to adapt the root cursor\n   :raf        - override requestAnimationFrame based rendering. If\n                 false setTimeout will be use. If given a function\n                 will be invoked instead.\n\n   Example:\n\n   (root\n     (fn [data owner]\n       ...)\n     {:message :hello}\n     {:target js/document.body})", :end-column 11, :end-line 1065, :column 7, :line 1065, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :name om.core/root, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 11, :method-params ([f value p__31232]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1065, :end-line 1065, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f value {:keys [target tx-listen path instrument descriptor adapt raf], :as options}])), :doc "Take a component constructor function f, value an immutable tree of\n   associative data structures optionally an wrapped in an IAtom\n   instance, and a map of options and installs an Om/React render\n   loop.\n\n   f must return an instance that at a minimum implements IRender or\n   IRenderState (it may implement other React life cycle protocols). f\n   must take at least two arguments, the root cursor and the owning pure\n   node. A cursor is just the original data wrapped in an ICursor\n   instance which maintains path information. Only one root render\n   loop allowed per target element. om.core/root is idempotent, if\n   called again on the same target element the previous render loop\n   will be replaced.\n\n   Options may also include any key allowed by om.core/build to\n   customize f. In addition om.core/root supports the following\n   special options:\n\n   :target     - (required) a DOM element. \n   :shared     - data to be shared by all components, see om.core/get-shared\n   :tx-listen  - a function that will listen in in transactions, should\n                 take 2 arguments - the first a map containing the\n                 path, old and new state at path, old and new global\n                 state, and transaction tag if provided.\n   :instrument - a function of three arguments that if provided will\n                 intercept all calls to om.core/build. This function should\n                 correspond to the three arity version of om.core/build.\n   :adapt      - a function to adapt the root cursor\n   :raf        - override requestAnimationFrame based rendering. If\n                 false setTimeout will be use. If given a function\n                 will be invoked instead.\n\n   Example:\n\n   (root\n     (fn [data owner]\n       ...)\n     {:message :hello}\n     {:target js/document.body})", :test true}, IDisplayName {:meta {:protocol-info {:methods {display-name [[this]]}}, :protocol-symbol true, :doc nil, :end-column 26, :end-line 19, :column 14, :line 19, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol-symbol true, :name om.core/IDisplayName, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 26, :column 1, :line 19, :protocol-info {:methods {display-name [[this]]}}, :info nil, :end-line 19, :impls #{}, :doc nil, :test true}, id {:protocol-inline nil, :meta {:arglists (quote ([owner])), :end-column 9, :end-line 873, :column 7, :line 873, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :name om.core/id, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 9, :method-params ([owner]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 873, :end-line 873, :max-fixed-arity 1, :fn-var true, :arglists (quote ([owner])), :test true}, will-receive-props {:protocol-inline nil, :meta {:arglists (quote ([this next-props])), :doc nil, :protocol om.core/IWillReceiveProps, :end-column 22, :end-line 44, :column 4, :line 44, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol om.core/IWillReceiveProps, :name om.core/will-receive-props, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 22, :method-params ([this next-props]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 44, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this next-props])), :doc nil, :test true}, remove-ref-from-component! {:protocol-inline nil, :meta {:arglists (quote ([c ref])), :end-column 33, :end-line 819, :column 7, :line 819, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :name om.core/remove-ref-from-component!, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 33, :method-params ([c ref]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 819, :end-line 819, :max-fixed-arity 2, :fn-var true, :arglists (quote ([c ref])), :test true}, IGetRenderState {:meta {:protocol-info {:methods {-get-render-state [[this] [this ks]]}}, :protocol-symbol true, :doc nil, :end-column 29, :end-line 68, :column 14, :line 68, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol-symbol true, :name om.core/IGetRenderState, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 29, :column 1, :line 68, :protocol-info {:methods {-get-render-state [[this] [this ks]]}}, :info nil, :end-line 68, :impls #{om.core/x31086 om.core/x31058 om.core/x31087 om.core/x31059}, :doc nil, :test true}, -remove-properties! {:protocol-inline nil, :meta {:arglists (quote ([this id])), :doc nil, :protocol om.core/IRootProperties, :end-column 23, :end-line 128, :column 4, :line 128, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol om.core/IRootProperties, :name om.core/-remove-properties!, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 23, :method-params ([this id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 125, :end-line 128, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this id])), :doc nil, :test true}, component? {:protocol-inline nil, :meta {:arglists (quote ([x])), :end-column 17, :end-line 175, :column 7, :line 175, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :name om.core/component?, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 175, :end-line 175, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, update! {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 4, :method-params ([cursor v] [cursor korks v] [cursor korks v tag]), :arglists ([cursor v] [cursor korks v] [cursor korks v tag]), :arglists-meta (nil nil nil)}, :arglists (quote ([cursor v] [cursor korks v] [cursor korks v tag])), :doc "Like transact! but no function provided, instead a replacement\n  value is given.", :end-column 14, :end-line 1219, :column 7, :line 1219, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :name om.core/update!, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([cursor v] [cursor korks v] [cursor korks v tag]), :arglists ([cursor v] [cursor korks v] [cursor korks v tag]), :arglists-meta (nil nil nil)}, :method-params ([cursor v] [cursor korks v] [cursor korks v tag]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1219, :end-line 1219, :max-fixed-arity 4, :fn-var true, :arglists ([cursor v] [cursor korks v] [cursor korks v tag]), :doc "Like transact! but no function provided, instead a replacement\n  value is given.", :test true}, will-update {:protocol-inline nil, :meta {:arglists (quote ([this next-props next-state])), :doc nil, :protocol om.core/IWillUpdate, :end-column 15, :end-line 38, :column 4, :line 38, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol om.core/IWillUpdate, :name om.core/will-update, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 15, :method-params ([this next-props next-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 38, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this next-props next-state])), :doc nil, :test true}, display-name {:protocol-inline nil, :meta {:arglists (quote ([this])), :doc nil, :protocol om.core/IDisplayName, :end-column 16, :end-line 20, :column 4, :line 20, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol om.core/IDisplayName, :name om.core/display-name, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil, :test true}, render-props {:protocol-inline nil, :meta {:arglists (quote ([this props state])), :doc nil, :protocol om.core/IRenderProps, :end-column 16, :end-line 50, :column 4, :line 50, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol om.core/IRenderProps, :name om.core/render-props, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 16, :method-params ([this props state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 50, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this props state])), :doc nil, :test true}, -empty-queue! {:protocol-inline nil, :meta {:arglists (quote ([this])), :doc nil, :protocol om.core/IRenderQueue, :end-column 17, :end-line 80, :column 4, :line 80, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol om.core/IRenderQueue, :name om.core/-empty-queue!, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 80, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil, :test true}, refresh-queued {:meta {:private true, :end-column 30, :end-line 842, :column 16, :line 842, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :file "resources/public/js/compiled/out/om/core.cljs", :line 842, :column 1, :end-line 842, :end-column 30, :private true, :test true, :name om.core/refresh-queued}, IGetState {:meta {:protocol-info {:methods {-get-state [[this] [this ks]]}}, :protocol-symbol true, :doc nil, :end-column 23, :end-line 65, :column 14, :line 65, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol-symbol true, :name om.core/IGetState, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 23, :column 1, :line 65, :protocol-info {:methods {-get-state [[this] [this ks]]}}, :info nil, :end-line 65, :impls #{om.core/x31086 om.core/x31058 om.core/x31087 om.core/x31059}, :doc nil, :test true}, ->IndexedCursor {:protocol-inline nil, :meta {:arglists (quote ([value state path])), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IDeref cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup}, :protocols #{om.core/IValue cljs.core/IIndexed cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection om.core/ITransact cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack om.core/ICursor cljs.core/IDeref cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup}, :end-column 23, :end-line 634, :column 10, :line 634, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocols #{om.core/IValue cljs.core/IIndexed cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection om.core/ITransact cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack om.core/ICursor cljs.core/IDeref cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup}, :name om.core/->IndexedCursor, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 23, :method-params ([value state path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 634, :end-line 634, :max-fixed-arity 3, :fn-var true, :arglists (quote ([value state path])), :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IDeref cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup}, :test true}, -transact! {:protocol-inline nil, :meta {:arglists (quote ([cursor korks f tag])), :doc nil, :protocol om.core/ITransact, :end-column 14, :end-line 116, :column 4, :line 116, :file "/Users/cmdrdats/storage/exp/om-tut/resources/public/js/compiled/out/om/core.cljs"}, :protocol om.core/ITransact, :name om.core/-transact!, :variadic false, :file "resources/public/js/compiled/out/om/core.cljs", :end-column 14, :method-params ([cursor korks f tag]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 115, :end-line 116, :max-fixed-arity 4, :fn-var true, :arglists (quote ([cursor korks f tag])), :doc nil, :test true}}, :require-macros {dom om.dom, om.dom om.dom, om.core om.core}, :cljs.analyzer/constants {:order [:else :om.core/defer :path :old-value :new-value :old-state :new-state :tag :om.core/not-found :componentDidUpdate :isOmComponent :componentWillUnmount :componentWillReceiveProps :shouldComponentUpdate :render :componentWillUpdate :getInitialState :componentDidMount :getDisplayName :componentWillMount :om.core/id :state-map :pending-state :previous-state :render-state :om.core/invalid :descriptor :fn :instrument :react-key :key :init-state :state :key-fn :opts :om.core/index :shared :om.core/pass :raf :adapt :tx-listen :target :skip-render-root :ignore], :seen #{:old-state :path :state-map :new-value :descriptor :om.core/not-found :componentDidUpdate :fn :new-state :instrument :react-key :om.core/id :key :skip-render-root :else :isOmComponent :adapt :old-value :om.core/pass :init-state :state :pending-state :componentWillUnmount :componentWillReceiveProps :ignore :shouldComponentUpdate :key-fn :render :previous-state :componentWillUpdate :getInitialState :opts :om.core/index :shared :raf :componentDidMount :om.core/invalid :tag :target :getDisplayName :componentWillMount :om.core/defer :render-state :tx-listen}}, :doc nil}